For A, I based it off the phong shader example so I was 
given 2 lights and I just added the 3rd. I then changed 
the position and colors of the lights. I then tried to 
apply 2 different shaders since the phong shader was 
given but I was having a really hard time doing so 
and nothing was working. I then opted to basemy shaders 
off the professor's examples and then alter them to 
make my own variation but not even applying the professor's 
code worked so I just left the code for the original 
phong shader on the all 3 objects and left the code 
I tried to base my shaders off in the script. I also 
applied a rotation to both the cube and the disk and 
made the sphere slowly fall off the screen.

For B, I was trying to base it off the edge example and make 
my own effect but I was hoenstly really lost in trying to 
interperet the code and had no idea how to apply any kind 
of effect so I ended up just altering both the current effect
and the mouse effect. I changed the 2 kernels in the edge code provided to
one for edge detection and the other to Gaussian blurr. I also
removed the squre root when calculating G. The effect looks cool I guess. For the mouse 
I changed it so that the event listened responded to a click and not a 
drag of the mouse so the same thing applies as before with the dragging 
of the mouse but if you actually want to implelent the effect you have to click
as well. So clicking at the upper left corner of the screen will bring the original 
image whil clicking on the bottom right will max out the effect and clicking around will
change the effect each time.

For C, I kept the states the same but I changed the colors.
If a cell is alive and has been suceeded it will be magenta 
as well as all the successors. If a cell has been revived,
It will be yellow to start but all of its successors from 
there on will become magenta. When the program ends you can
see how many were revived before the program stopped. That's 
about all I was able to do for this program. I did try altering
consitions a bit but it resulted in bad things happeneing.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ALSO: Some feelings about this class. So I personally 
feel like there was just way too much introduced at the 
beginning of the course that was just really hard to 
digest and I feel like in future classes it would be 
a lot more beneficial to do a bootcamp style thing for 
the start of the course. I feel like most of us come to 
this class with little to no understanding about 
graphics programming and a runthrough about keywords
and variable types would have been useful. I find this 
class to be interesting and both the professor and TA 
are good at teaching the subject matter and are also 
really approachable which I find really important. But,
as much as I want to say I love this class, I feel like
I can't ignore the fact that a lot of the examples
are really difficult to digiest and it isn't like a 
regular computer sciecne example where we can just 
look up a few prebuilt functions or keywords. There 
are just lots of unknown functions and keywords that
ocassionally just spiral into an even bigger mess of 
unknown words and functions that just makes things 
more complicated. This class is fun and learning 
about graphics is fun but I also feel like attempting 
to do these 3 assignments based off of the professor's
code was just really difficult when all these types 
like 'varying', 'uniform', 'attribute', 'sampler2D', 
etc... are just kind of mysteriously floating around
in the vertex shader and fragment shader scripts.
 I feel like this class kind of just needs a day 
where we can go in depth into what a vertex and fragment 
shaders are and how they work and how 
we can determine the functions and things we will need
to implement an effect because I feel like I've 
just been blindly following the examples. 
